import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Check, ChevronLeft, ChevronRight, Loader2, ArrowLeft } from 'lucide-react';
import { toursService } from '../../../services/tours.service';

// Define Tour type inline to match BasicInfoStep.tsx
interface Tour {
  id?: string;
  title: string;
  description: string;
  price: number;
  category?: string;
  location?: string;
  duration?: number;
  min_group_size?: number;
  max_group_size?: number;
  difficulty?: string;
  best_season?: string;
  accommodation_type?: string;
  status?: string;
  featured?: boolean;
  start_location?: string;
  end_location?: string;
  [key: string]: any;
}

// Define FormErrors type inline
type FormErrors = Record<string, string>;

// Import components from relative paths
import BasicInfoStep from './Steps/BasicInfoStep';
import ImagesStep from './Steps/ImagesStep';
import ItineraryStep from './Steps/ItineraryStep';
import InclusionsStep from './Steps/InclusionsStep';

type FormStep = 'basic' | 'images' | 'itinerary' | 'inclusions';

// Button component for simplicity
interface ButtonProps {
  children: React.ReactNode;
  type?: 'button' | 'submit' | 'reset';
  variant?: 'default' | 'outline';
  disabled?: boolean;
  className?: string;
  onClick?: () => void;
}

const Button: React.FC<ButtonProps> = ({ 
  children, 
  type = 'button',
  variant = 'default',
  disabled = false,
  className = '',
  onClick 
}) => {
  return (
    <button
      type={type}
      disabled={disabled}
      className={className}
      onClick={onClick}
    >
      {children}
    </button>
  );
};

const AddTourForm: React.FC = () => {
  const navigate = useNavigate();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [currentStep, setCurrentStep] = useState<FormStep>('basic');
  const [tour, setTour] = useState<Partial<Tour>>({
    title: '',
    description: '',
    price: 0,
    status: 'draft'
  });
  const [errors, setErrors] = useState<FormErrors>({});

  const steps: { id: FormStep; label: string; description: string }[] = [
    { id: 'basic', label: 'Basic Information', description: 'Enter the essential details about your tour' },
    { id: 'images', label: 'Images', description: 'Upload appealing images for your tour' },
    { id: 'itinerary', label: 'Itinerary', description: 'Create a detailed day-by-day itinerary' },
    { id: 'inclusions', label: 'Inclusions & Exclusions', description: 'Specify what is included and excluded in the tour' }
  ];

  const validateCurrentStep = (): boolean => {
    const newErrors: FormErrors = {};

    if (currentStep === 'basic') {
      if (!tour.title) newErrors.title = 'Tour title is required';
      if (!tour.description) newErrors.description = 'Description is required';
      if (!tour.price) newErrors.price = 'Price is required';
      if (!tour.category) newErrors.category = 'Category is required';
      if (!tour.location) newErrors.location = 'Location is required';
      
      // Validate duration
      if (!tour.duration) newErrors.duration = 'Duration is required';
    }

    // We'll skip validation for other steps since they're coming soon features

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const goToNextStep = () => {
    if (validateCurrentStep()) {
      const currentIndex = steps.findIndex(step => step.id === currentStep);
      if (currentIndex < steps.length - 1) {
        setCurrentStep(steps[currentIndex + 1].id);
        // Scroll to top smoothly
        window.scrollTo({ top: 0, behavior: 'smooth' });
      }
    }
  };

  const goToPreviousStep = () => {
    const currentIndex = steps.findIndex(step => step.id === currentStep);
    if (currentIndex > 0) {
      setCurrentStep(steps[currentIndex - 1].id);
      // Scroll to top smoothly
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateCurrentStep()) return;
    
    setIsSubmitting(true);
    
    try {
      // Make sure required fields are defined
      if (!tour.title || !tour.description || tour.price === undefined) {
        throw new Error('Required fields are missing');
      }
      
      // Generate a slug since the service might still require it
      const slug = tour.title.toLowerCase().replace(/[^\w\s-]/g, '').replace(/\s+/g, '-');
      
      // Prepare the tour data for submission
      const tourData = {
        title: tour.title,
        description: tour.description,
        price: tour.price,
        slug: slug, // Generate a slug from the title
        image_url: '/images/default-tour-image.jpg', // Default image since upload is coming soon
        rating: 5.0, // Default rating for new tours
        featured: tour.featured || false,
        duration: typeof tour.duration === 'number' ? `${tour.duration} days` : (tour.duration || '1 day'),
        location: tour.location || 'Tanzania',
        start_location: tour.start_location,
        end_location: tour.end_location,
        category: tour.category || 'adventure',
        min_group_size: tour.min_group_size,
        max_group_size: tour.max_group_size,
        difficulty: tour.difficulty,
        accommodation_type: tour.accommodation_type,
        included: tour.included || [],
        excluded: tour.excluded || []
      };
      
      const result = await toursService.createTour(tourData);
      
      if (result) {
        navigate('/admin/tours');
      } else {
        throw new Error('Failed to create tour');
      }
    } catch (error) {
      console.error('Error creating tour:', error);
      setErrors({ submit: 'Failed to create tour. Please try again.' });
    } finally {
      setIsSubmitting(false);
    }
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 'basic':
        return (
          <BasicInfoStep 
            formValues={tour}
            onChange={setTour}
            errors={errors}
            onValidation={() => {}}
          />
        );
      case 'images':
        return (
          <ImagesStep 
            tour={tour} 
            setTour={setTour}
            errors={errors}
            isLoading={isSubmitting}
          />
        );
      case 'itinerary':
        return (
          <ItineraryStep 
            tour={tour} 
            setTour={setTour}
            errors={errors}
            isLoading={isSubmitting}
          />
        );
      case 'inclusions':
        return (
          <InclusionsStep 
            tour={tour} 
            setTour={setTour}
            errors={errors}
            isLoading={isSubmitting}
          />
        );
      default:
        return null;
    }
  };

  return (
    <div className="max-w-5xl mx-auto px-4 py-8">
      {/* Back to tours button */}
      <button 
        onClick={() => navigate('/admin/tours')}
        className="flex items-center text-gray-600 mb-6 hover:text-brand-600 transition-colors"
      >
        <ArrowLeft className="w-4 h-4 mr-1" />
        <span>Back to tours</span>
      </button>

      <form onSubmit={handleSubmit} className="space-y-8 bg-white rounded-xl shadow-sm border border-gray-100 p-6">
        {/* Step Progress Indicator */}
        <div className="mb-8">
          <div className="flex flex-col sm:flex-row justify-between mb-6">
            <h1 className="text-2xl font-bold text-gray-900 mb-2">Create New Tour</h1>
            <div className="text-sm font-medium text-brand-600">Step {steps.findIndex(s => s.id === currentStep) + 1} of {steps.length}</div>
          </div>
          
          <div className="relative">
            {/* Progress Bar Background */}
            <div className="hidden sm:block absolute top-1/2 left-0 w-full h-2 bg-gray-100 rounded-full -translate-y-1/2"></div>
            
            {/* Progress Bar Fill */}
            <div 
              className="hidden sm:block absolute top-1/2 left-0 h-2 bg-gradient-to-r from-brand-500 to-brand-600 rounded-full -translate-y-1/2 transition-all duration-300"
              style={{ 
                width: `${(steps.findIndex(s => s.id === currentStep) / (steps.length - 1)) * 100}%` 
              }}
            ></div>
            
            {/* Steps */}
            <div className="flex flex-col sm:flex-row sm:justify-between gap-4 sm:gap-0 relative z-10">
              {steps.map((step, index) => {
                const isActive = currentStep === step.id;
                const isCompleted = steps.findIndex(s => s.id === currentStep) > index;
                
                return (
                  <div 
                    key={step.id} 
                    className={`flex items-start sm:flex-col sm:items-center ${index !== 0 ? 'sm:flex-1' : ''}`}
                  >
                    <div 
                      className={`